import React, { useState } from 'react';
import { Input, Button } from '@/shared/ui';
import { MealSelector } from '@/features/meal-selection';
import { useRecipeGeneration } from '@/features/recipe-generation';
import { useImageGeneration } from '@/features/image-generation';
import squirrel from '@/shared/assets/squirrel.png';
import './RecipeForm.scss';

interface RecipeFormProps {
  onGenerate: (response: string) => void;
}

export const RecipeForm: React.FC<RecipeFormProps> = ({ onGenerate }) => {
  const [token, setToken] = useState('');
  const [selectedMeal, setSelectedMeal] = useState('–ª—é–±–æ–µ –±–ª—é–¥–æ');

  const { isLoading, error, displayText, parsedRecipe, generateRecipe } = useRecipeGeneration();
  const { isGeneratingImage, generatedImage, loadingDots, imageError, generateImage } = useImageGeneration();

  const handleGenerate = async () => {
    const recipe = await generateRecipe(selectedMeal, token);
    if (recipe) {
      onGenerate(JSON.stringify(recipe));
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
      try {
        await generateImage(recipe, token);
      } catch (imageError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageError);
      }
    }
  };

  return (
    <div className="recipe-form">
      <header>
        <div className="header-content">
          <img src={squirrel} alt="Squirrel" className="image_title" />
          <h1>Squirrel cook</h1>
        </div>
        <p className="description">
          –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
          <br />‚Ä¢ –ù–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —É–∂–∏–Ω?
          <br />‚Ä¢ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ?
          <br />‚Ä¢ –ù—É–∂–µ–Ω –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤?
        </p>
      </header>

      <div className="card">
        <div className="form-group">
          <Input
            type="password"
            value={token}
            onChange={setToken}
            placeholder="sk-proj-..."
            label="API –∫–ª—é—á OpenAI:"
          />
        </div>

        <div className="form-group">
          <label>–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:</label>
          <MealSelector
            selectedMeal={selectedMeal}
            onMealSelect={setSelectedMeal}
          />
        </div>

        <Button
          onClick={handleGenerate}
          disabled={isLoading}
          loading={isLoading}
          className="generate-btn"
        >
          {isLoading ? displayText : `–ü–æ–ª—É—á–∏—Ç—å ${selectedMeal}`}
        </Button>

        {error && <div className="error-message">–û—à–∏–±–∫–∞: {error}</div>}
      </div>

      {parsedRecipe && !error && (
        <>
          {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º */}
          <div className="recipe-main-container">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª—é–¥–∞ */}
            <div className="recipe-header">
              <h2 className="dish-title">{parsedRecipe.dishName}</h2>
              <div className="dish-weight-badge">
                <span className="weight-label">–û–±—â–∏–π –≤–µ—Å:</span>
                <span className="weight-value">{parsedRecipe.totalWeight}</span>
              </div>
            </div>
            
            {/* –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã */}
            <div className="ingredients-section">
              <h3>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</h3>
              <div className="ingredients-list">
                {parsedRecipe.ingredients.map((ingredient, index) => (
                  <div key={index} className="ingredient-item">
                    <span className="ingredient-name">{ingredient}</span>
                  </div>
                ))}
              </div>
            </div>
            
            {/* –†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è */}
            <div className="recipe-section">
              <h3>–†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h3>
              <div className="recipe-steps">
                {parsedRecipe.recipe.map((step, index) => (
                  <div key={index} className="recipe-step">
                    <span className="step-number">{index + 1}</span>
                    <span className="step-text">{step}</span>
                  </div>
                ))}
              </div>
            </div>
            
            {/* –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å */}
            <div className="nutrition-section">
              <h3>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ 100–≥)</h3>
              <div className="nutrition-grid">
                <div className="nutrition-item">
                  <span className="nutrition-label">–ö–∞–ª–æ—Ä–∏–∏</span>
                  <span className="nutrition-value">{parsedRecipe.nutrition.calories}</span>
                </div>
                <div className="nutrition-item">
                  <span className="nutrition-label">–ë–µ–ª–∫–∏</span>
                  <span className="nutrition-value">{parsedRecipe.nutrition.proteins}</span>
                </div>
                <div className="nutrition-item">
                  <span className="nutrition-label">–ñ–∏—Ä—ã</span>
                  <span className="nutrition-value">{parsedRecipe.nutrition.fats}</span>
                </div>
                <div className="nutrition-item">
                  <span className="nutrition-label">–£–≥–ª–µ–≤–æ–¥—ã</span>
                  <span className="nutrition-value">{parsedRecipe.nutrition.carbs}</span>
                </div>
              </div>
            </div>
          </div>

          {/* –ë–ª–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
          <div className="image-actions-container">
            <div className="image-section">
              {isGeneratingImage ? (
                <div className="image-loading">
                </div>
              ) : imageError ? (
                <div className="image-error">
                  <div className="image-error-icon">‚ö†Ô∏è</div>
                  <div className="image-error-text">{imageError}</div>
                </div>
              ) : generatedImage ? (
                <img src={generatedImage} alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ" className="generated-image" />
              ) : (
                <div className="image-placeholder">
                  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å{loadingDots}
                </div>
              )}
            </div>
            
            <div className="actions-section">
              <div className="action-item">
                <div className="action-icon">üíæ</div>
                <span className="action-text">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç</span>
              </div>
              <div className="action-item">
                <div className="action-icon">üì§</div>
                <span className="action-text">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</span>
              </div>
              <div className="action-item">
                <div className="action-icon">‚≠ê</div>
                <span className="action-text">–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
              </div>
              <div className="action-item">
                <div className="action-icon">üñ®Ô∏è</div>
                <span className="action-text">–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å</span>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
}; 